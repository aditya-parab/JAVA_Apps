package com.day17;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;

public class Prims {

    public static ArrayList<ArrayList<Integer>> convertToAdjList(int[][] matrix) {
        ArrayList<ArrayList<Integer>> adjList = new ArrayList<ArrayList<Integer>>();

        for (int i = 0; i < matrix.length; i++) {
            ArrayList<Integer> row = new ArrayList<Integer>();

            for (int j = 0; j < matrix[i].length; j++) {
                if (matrix[i][j] != 0) { // Only consider non-zero weights as edges
                    row.add(j);
                }
            }
            adjList.add(row);
        }

        return adjList;
    }

    public static int prims(ArrayList<ArrayList<Integer>> adjList) {
        int numVertices = adjList.size();
        boolean[] visited = new boolean[numVertices];
        int[] parent = new int[numVertices];
        int[] key = new int[numVertices];
        Arrays.fill(key, Integer.MAX_VALUE);

        PriorityQueue<Node> minHeap = new PriorityQueue<>();
        key[0] = 0;
        parent[0] = -1;
        minHeap.offer(new Node(0, key[0]));

        int totalWeight = 0;

        while (!minHeap.isEmpty()) {
            Node node = minHeap.poll();
            int u = node.vertex;
            visited[u] = true;
            totalWeight += node.key;

            for (int v : adjList.get(u)) {
                if (!visited[v] && key[v] > adjList.get(u).get(v)) {
                    minHeap.offer(new Node(v, adjList.get(u).get(v)));
                    parent[v] = u;
                    key[v] = adjList.get(u).get(v);
                }
            }
        }

        return totalWeight;
    }
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int adj[][]= {{0,4,0,8,0,0,0,0},
				{4,0,3,0,0,0,0,0},
				{0,3,0,0,0,0,2,1},
				{8,0,0,0,3,0,0,0},
				{0,0,0,3,0,7,0,0},
				{0,0,0,4,7,0,6,0},
				{0,0,2,5,0,6,0,7},
				{0,0,1,0,0,2,7,0}};

		
		ArrayList<ArrayList<Integer>> adjList = convertToAdjList(adj);
		
//		System.out.println(dfs(adjList));
		int ans = dfs(adjList);
		
//		for(int i: ans) {
//			System.out.print((char)(i+65)+" ");
//		}
		System.out.println(ans);
		
	}

}
