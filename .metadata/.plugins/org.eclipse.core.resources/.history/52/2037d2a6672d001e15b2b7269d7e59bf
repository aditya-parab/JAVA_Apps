package com.day12;
class PolyNode {
	private int base;
	private int exp;
	private PolyNode next;
	public int getBase() {
		return base;
	}
	public int getExponent() {
		return exp;
	}
	public void setBase(int base) {
		this.base = base;
	}
	public void setExponent(int exp) {
		this.exp = exp;
	}
	public PolyNode getNext() {
		return next;
	}
	public void setNext(PolyNode next) {
		this.next = next;
	}
	public PolyNode(int i,int j, PolyNode next) {
		super();
		this.base = i;
		this.exp = j;
		this.next = next;
	}
	@Override
	public String toString() {
		return ""+base+"^"+exp;
	}
	
}


class PolyLinkedList<T extends Comparable<T>>{
	private PolyNode first=null;
	void add(int base,int exp) {
		PolyNode newnode=new PolyNode(base,exp,null);
		if(first==null) {
			first=newnode;
		}
		else
		{
			PolyNode temp=first;
			while(temp.getNext()!=null) {
				temp=temp.getNext();
			}
			temp.setNext(newnode);
		}

	}
	public String toString() {
		String msg="";
		PolyNode temp=first;
		while(temp!=null) {
		if(temp.getNext()!=null)
		msg+=(temp.getBase()+"^"+temp.getExponent()+"+");
		else {			//in case we are at the last index we don't append a space
			msg+=(temp.getBase()+"^"+temp.getExponent()+"");
		}
		temp=temp.getNext();
		}
		
		return msg;
	}
	
	//counts the number of nodes
	public int count() {
		PolyNode curr = first;
		int i =0;
		while(curr!=null) {
			i++;
			curr=curr.getNext();
		}
		return i;
	}
	
	
//		
//	}

	
}
public class PolynomialAdditionAndMultiplication {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		PolyLinkedList p = new PolyLinkedList();
		p.add(2,3);
		

	}

}
